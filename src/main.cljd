(ns main
  (:require ["package:flutter/material.dart" :as m]
            ["package:english_words/english_words.dart" :as w]
            [cljd.flutter :as f]))

(defn big-card [^w/WordPair pair]
  (f/widget
   :get {{{:flds [primary onPrimary]} .-colorScheme
          {:flds [displayMedium]} .-textTheme} m/Theme}
   (m/Card .color primary)
   (m/Padding .padding (m/EdgeInsets.all 20.0))
   (m/Text (.-asLowerCase pair)
           .style (.copyWith displayMedium .color onPrimary)
           .semanticsLabel (.-asPascalCase pair))))

(defn generator-page [state]
  (f/widget
   (m/Column .mainAxisAlignment m/MainAxisAlignment.center)
   .children
   [(big-card (f/$ (:current (f/<! state))))
    (m/SizedBox .height 10)
    (f/widget
     :watch [{:keys [favorites current]} state]
     (m/Row .mainAxisSize m/MainAxisSize.min)
     .children
     [(let [icon (if (favorites current) m/Icons.favorite m/Icons.favorite_border)]
        (m/ElevatedButton.icon
         .onPressed #(swap! state update :favorites conj current)
         .icon (m/Icon icon)
         .label (m/Text "Like")))
      (m/SizedBox .width 10)
      (f/widget
       (m/ElevatedButton .onPressed #(swap! state assoc :current (.random w/WordPair)))
       (m/Text "Next"))])]))

(defn favorites-page [state]
  (f/widget
   :watch [favorites (f/$ (:favorites (f/<! state)))]
   (if (empty? favorites)
     (m/Center .child (m/Text "No favorites yet."))
     (f/widget
      :let [cnt (count favorites)
            plural-s (if (< 1 cnt) "s" "")
            msg (str "You have " cnt " favorite" plural-s)]
      (m/ListView
       .children (into
                  [(m/Padding .padding (m/EdgeInsets.all 20.0)
                              .child (m/Text msg))]
                  (for [^w/WordPair item favorites]
                    (m/ListTile
                     .leading (m/Icon m/Icons.favorite)
                     .title (m/Text (.-asLowerCase item))))))))))

(defn my-home-page [state]
  (let [selected-index (atom 0)]
    (m/LayoutBuilder
     .builder
     (f/build [^m/BoxConstraints constraints]
              :watch [i selected-index]
              m/Scaffold
              .body
              m/Row
              .children
              [(f/widget
                m/SafeArea
                (m/NavigationRail
                 .extended (>= (.-maxWidth constraints) 600)
                 .destinations
                 (for [[icon label] [[m/Icons.home "Home"]
                                     [m/Icons.favorite "Favorites"]]]
                   (m/NavigationRailDestination
                    .icon (m/Icon icon)
                    .label (m/Text label)))
                 .selectedIndex i
                 .onDestinationSelected #(reset! selected-index %)))
               (f/widget
                m/Expanded
                :get {{{color .-primaryContainer} .-colorScheme} m/Theme}
                (m/Container .color color)
                (case i
                  0 (generator-page state)
                  1 (favorites-page state)))]))))

(defn main []
  (let [state (atom {:current (.random w/WordPair) :favorites #{}})]
    (f/run
     (m/MaterialApp
      .title "Namer App"
      .theme (m/ThemeData
              .useMaterial3 true
              .colorScheme (m/ColorScheme.fromSeed .seedColor m/Colors.deepOrange)))
     .home (my-home-page state))))
